name: Java CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    env:
      SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
      # set in Settings > Secrets and variables > Actions > New repository secret
      # modify application.yml

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      # test database

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'  # ⚠️ 修改为你实际使用的 Java 版本

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      - name: Build and run tests
        run: mvn clean verify  # ⚠️ 如果你是 Gradle 项目，改成 ./gradlew build

      - name: Deploy to production
        if: github.ref == 'refs/heads/main' && success()
        run: |
          echo "Deploying..."  
          - name: Upload JAR to server
           run: |
             echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
             chmod 600 private_key.pem
             scp -i private_key.pem -o StrictHostKeyChecking=no target/*.jar azureuser@172.191.111.81:/home/azureuser/app.jar
          
          - name: SSH and restart app
           run: |
             ssh -i private_key.pem -o StrictHostKeyChecking=no azureuser@172.191.111.81 << 'EOF'
               # kill old one
               pkill -f 'java -jar /home/azureuser/app.jar' || true

               # start new one
               nohup java -jar /home/azureuser/app.jar > app.log 2>&1 &

               echo "App deployed and started."
             EOF
